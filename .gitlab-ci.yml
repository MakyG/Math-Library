stages:
    - build
    - unitTests
    - test

variables:
  PROJECT_NAME: "Math_library"
  BINARY_PATH: "bin"
  INPUT_FILE_PATH: "/home/gitlab-runner/ADS/Math_library"

before_script:
  - /opt/QtCreator/bin/qbs-setup-toolchains --detect

linux:
  tags:
    - seminars
  stage: build
  
  script: 
    - /opt/QtCreator/bin/qbs -f $PROJECT_NAME.qbs profile:gcc qbs.installRoot:. config:linux qbs.defaultBuildVariant:debug

  cache:
    paths:
      - $BINARY_PATH/$PROJECT_NAME
      - $BINARY_PATH/tests
    
  artifacts:
    paths:
      - $BINARY_PATH/$PROJECT_NAME
      - $BINARY_PATH/tests
    when: always

win:
  tags:
    - seminars

  stage: build
  allow_failure: true

  script:
    - /opt/QtCreator/bin/qbs -f $PROJECT_NAME.qbs profile:i686-w64-mingw32.static qbs.installRoot:. config:win qbs.defaultBuildVariant:debug

  artifacts:
    paths:
      - $BINARY_PATH/$PROJECT_NAME.exe
      - $BINARY_PATH/tests.exe
    
unitTesting:
  tags:
    - seminars

  stage: unitTests
  allow_failure: true
  
  script:
    - $BINARY_PATH/tests > unitTestOutput.txt
    - if [[ `cat unitTestOutput.txt` =~ ", 0 failures" ]];then exit 0;else exit 1;fi
    
  artifacts:
    paths:
      - unitTestOutput.txt
    when: always
      
test1:
  tags:
    - seminars
  stage: test
  
  script: 
    - valgrind --log-file=valgrindOutput1.txt $BINARY_PATH/$PROJECT_NAME < $INPUT_FILE_PATH/input1.txt > output1.txt
    - diff output1.txt $INPUT_FILE_PATH/output1.txt > diffOutput1.diff
    - if [[ `cat valgrindOutput1.txt` =~ "no leaks are possible" ]];then exit 0;else exit 1;fi
    
  artifacts:
    paths:
      - output1.txt
      - diffOutput1.diff
    when: always
    
test2:
  tags:
    - seminars
  stage: test
  
  script: 
    - valgrind --log-file=valgrindOutput2.txt $BINARY_PATH/$PROJECT_NAME < $INPUT_FILE_PATH/input_eof1.txt > output_eof1.txt
    - diff output_eof1.txt $INPUT_FILE_PATH/output_eof1.txt > diffOutput_eof1.diff
    - if [[ `cat valgrindOutput2.txt` =~ "no leaks are possible" ]];then exit 0;else exit 1;fi
    
  artifacts:
    paths:
      - output_eof1.txt
      - diffOutput_eof1.diff
    when: always
    
test3:
  tags:
    - seminars
  stage: test
  
  script: 
    - valgrind --log-file=valgrindOutput3.txt $BINARY_PATH/$PROJECT_NAME < $INPUT_FILE_PATH/input_eof2.txt > output_eof2.txt
    - diff output_eof2.txt $INPUT_FILE_PATH/output_eof2.txt > diffOutput_eof2.diff
    - if [[ `cat valgrindOutput3.txt` =~ "no leaks are possible" ]];then exit 0;else exit 1;fi
    
  artifacts:
    paths:
      - output_eof2.txt
      - diffOutput_eof2.diff
    when: always
    
test4:
  tags:
    - seminars
  stage: test
  
  script: 
    - valgrind --log-file=valgrindOutput4.txt $BINARY_PATH/$PROJECT_NAME < $INPUT_FILE_PATH/input_eof3.txt > output_eof3.txt
    - diff output_eof3.txt $INPUT_FILE_PATH/output_eof3.txt > diffOutput_eof3.diff
    - if [[ `cat valgrindOutput4.txt` =~ "no leaks are possible" ]];then exit 0;else exit 1;fi
    
  artifacts:
    paths:
      - output_eof3.txt
      - diffOutput_eof3.diff
    when: always
    
test5:
  tags:
    - seminars
  stage: test
  
  script: 
    - valgrind --log-file=valgrindOutput5.txt $BINARY_PATH/$PROJECT_NAME < $INPUT_FILE_PATH/input_eof4.txt > output_eof4.txt
    - diff output_eof4.txt $INPUT_FILE_PATH/output_eof4.txt > diffOutput_eof4.diff
    - if [[ `cat valgrindOutput5.txt` =~ "no leaks are possible" ]];then exit 0;else exit 1;fi
    
  artifacts:
    paths:
      - output_eof4.txt
      - diffOutput_eof4.diff
    when: always
    
test6:
  tags:
    - seminars
  stage: test
  
  script: 
    - valgrind --log-file=valgrindOutput6.txt $BINARY_PATH/$PROJECT_NAME < $INPUT_FILE_PATH/input_eof5.txt > output_eof5.txt
    - diff output_eof5.txt $INPUT_FILE_PATH/output_eof5.txt > diffOutput_eof5.diff
    - if [[ `cat valgrindOutput6.txt` =~ "no leaks are possible" ]];then exit 0;else exit 1;fi
    
  artifacts:
    paths:
      - output_eof5.txt
      - diffOutput_eof5.diff
    when: always